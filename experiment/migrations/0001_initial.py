# Generated by Django 4.0.4 on 2022-07-12 16:51

from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdsConfigurations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_provider', models.CharField(max_length=100, verbose_name='Service Provider')),
                ('access_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=150, null=True, verbose_name='Access Key'))),
                ('secret_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=150, null=True, verbose_name='Secret Key'))),
                ('app_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=150, null=True, verbose_name='App Id'))),
                ('developer_token', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=150, null=True, verbose_name='Developer Token'))),
                ('client_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=150, null=True, verbose_name='Client Id'))),
                ('client_secret', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=150, null=True, verbose_name='Client Secret'))),
                ('refresh_token', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=150, null=True, verbose_name='Refresh Token'))),
            ],
            options={
                'verbose_name_plural': 'Ads Configurations',
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment_name', models.CharField(blank=True, max_length=250, null=True, verbose_name='Experiment Name')),
                ('experiment_hypothesis', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Experiment Hypothesis')),
                ('sender_email', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sender Email')),
                ('email_subject', models.CharField(blank=True, max_length=150, null=True, verbose_name='Email Subject')),
                ('experiment_type', models.CharField(choices=[('Created', 'Created'), ('Imported', 'Imported')], default='Created', max_length=8)),
                ('campaign_type', models.CharField(blank=True, choices=[('Email', 'Email'), ('Display Ads', 'Display Ads')], max_length=11, null=True)),
                ('experiment_file', models.FileField(blank=True, null=True, upload_to='experiments')),
                ('is_active', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, null=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name_plural': 'Experiments',
            },
        ),
        migrations.CreateModel(
            name='ImportExperimentContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('responder_id', models.CharField(blank=True, max_length=150, null=True, verbose_name='Responder Id')),
                ('experiment_content', models.CharField(blank=True, max_length=500, null=True, verbose_name='Experiment Content')),
                ('response_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Response Date & Time')),
                ('experiment_launch_date', models.DateField(blank=True, null=True, verbose_name='Experiment Launch Date')),
                ('experiment_question_type', models.CharField(blank=True, max_length=250, null=True, verbose_name='Experiment Question Type')),
                ('experiment_response_click', models.CharField(blank=True, max_length=150, null=True, verbose_name='Experiment Response Click')),
                ('experiment_response_view', models.CharField(blank=True, max_length=250, null=True, verbose_name='Experiment Response View')),
                ('experiment_response_convert', models.CharField(blank=True, max_length=250, null=True, verbose_name='Experiment Response Convert')),
                ('experiment_metric_name', models.CharField(blank=True, max_length=250, null=True, verbose_name='Experiment Metric Name')),
                ('experiment_metric_value', models.CharField(blank=True, max_length=250, null=True, verbose_name='Experiment Metric Value')),
                ('experiment_group', models.CharField(blank=True, max_length=250, null=True, verbose_name='Experiment Group')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiment_import_entry', to='experiment.experiment', verbose_name='Experiment')),
            ],
            options={
                'verbose_name_plural': 'Imported Experiments Content',
            },
        ),
        migrations.CreateModel(
            name='ExperimentGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.FileField(upload_to='experiment_files')),
                ('file_type', models.CharField(blank=True, choices=[('Email Template', 'Email Template'), ('Plain Text', 'Plain Text')], max_length=40, null=True, verbose_name='File Type')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiment_for_group', to='experiment.experiment', verbose_name='Experiment')),
            ],
            options={
                'verbose_name_plural': 'Experiments Groups',
            },
        ),
    ]
